#Project Euler 23: https://projecteuler.net/problem=23
#A number n is called deficient if the sum of its proper divisors is less than n and 
#It is called abundant if this sum exceeds n.
#As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. 
# all integers greater than 28123 can be written as the sum of two abundant numbers. 
#Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.


# Solves solution correctly in 10 seconds.
import time
start=time.time()

abun=set()

def div(n):
    i=2
    divs=set()
    sq=n**.5+1
    while i<sq: # Only need to check the first square root of numbers
        if n%i==0 and n!=i:
            d=n/i
            divs.add(i) #add divisors to list
            divs.add(d) #add divisors to list
        i=i+1
    sums=sum(divs) #get sums
    if sums>n: #if true, it is an abundant number
        abun.add(n) 
        
for n in range(12, 28_124): #no reason to check above 21_124
    div(n) # check each of these numbers if they are abundant
abun2=list(sorted(abun))
print("Found abundant numbers", time.time()-start, "seconds")

final=set() # use a set so sums do not accidental add twice.

for a in abun: 
    for b in abun: # Find sum of two abundant numbers
        if a+b<28_124: # Sum not included if bigger than 28,124
            final.add(a+b) # add all possible abun number combos.
sums=sum(final) #numbers below 28_124 that can be added as two adun numbers.   

total=0 # Will store total sum of numbers 1 through 28,124
for i in range(1, 28_124): #Get the total sum of numbers 1 through 28123
    total=total+i
print(total-sums, "Done.", time.time()-start, "seconds") # 4179871 Done. 9.440 seconds
