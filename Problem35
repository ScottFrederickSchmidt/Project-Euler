# Project Euler 35: https://projecteuler.net/problem=35
# The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
# There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97.
# How many circular primes are there below one million?


#Solution is correct but takes 96 seconds! Will soon create a second, faster solution:
import time
start=time.time()
print("running..")

def sieves(n):
    primes=[True]*n # prints x many True statements
    primes[0]=False # 0 is always not a prime
    primes[1]=False # 1 is always not a prime
    for i in range(2, int(n**.5)+1 ): #check through all numbers through the square root of n
        s=i*i
        while s<n:
            primes[s] = False # this number is False
            s = s+i # looks through all numbers divisible by for example, 2 or 3 and makes them False
    primes=[x for x in range(n) if primes[x]== True] # gets all remaining numbers that are True
    return primes
    
primes=sieves(1_000_000) # gets primes up to one million

count=0
circles=[]

for p in primes:
    t=str(p)
    temp=t[-1:]+t[:-1] #rotates first num to last num
    test=[]
    temp_count=0
    while temp in primes: #if rotation in primes
        temp=temp[-1:]+temp[:-1]
        test.append(temp)
        temp_count=temp_count+1
        if temp==p: #means temp fully rotated. 
            circles=circles+test 
            print(count, test)
            count=count+temp_count
            break

print("Done.", time.time()-start, "seconds")
print("Solution:", len(set(circles) ) )
# This version gets prime numbers more than once which is why it is slow. 
# To speed up, should delete out of prime list once a circle number is found? 
# Will do further research and edit in a faster solution at a later time. 
    
