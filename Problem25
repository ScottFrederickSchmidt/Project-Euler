# Project Euler 25: https://projecteuler.net/problem=25
#The Fibonacci sequence is defined by the recurrence relation:
#Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
#Hence the first 12 terms will be:
# F1 = 1  F2 = 1  F3 = 2  F4 = 3  F5 = 5 F6 = 8 F7 = 13 F8 = 21  F9 = 34  F10 = 55 F11 = 89 F12 = 144
# The 12th term, F12, is the first term to contain three digits.
# What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

# Solves final answer in 0.03124 seconds. Similiar setup to Euler problem 2. 
import time
start=time.time()

x=1
y=1
z=0
index=2 #start at 2 because F2=1 in instructions

while True:
    z=x+y # new fib number
    x=y # x becomes y
    y=z # y beomes z. x gets thrown out but is techically added to z.
    length=len(str(z)) #checks length of current fib term
    index=index+1 # need to keep track of index to get final answer
    # print(z, length)
    if length==1000: #once fib term has 1000 digits:
        print(index, time.time()-start, "seconds") # only need the index. But you can print z too.
        break # stops while loop
#4782 0.0312 seconds
