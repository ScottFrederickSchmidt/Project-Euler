#Project Euler 46: https://projecteuler.net/problem=46
#It was proposed by Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
#9 = 7 + 2×12
#15 = 7 + 2×22
#21 = 3 + 2×32
#25 = 7 + 2×32
#27 = 19 + 2×22
#33 = 31 + 2×12
#It turns out that the conjecture was false.
#What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?

# 5777 Done. 5.031 seconds
import time
start=time.time()
print("running..")

#Sets up problem getting primes and odd composite numbers:
sq=[2, 8, 18, 32, 50, 72, 98, 128, 162, 200, 242, 288, 338, 392, 450, 512, 578, 648, 722, 800, 882, 968, 1058, 1152, 1250, 1352, 1458, 1568, 1682, 1800, 1922, 2048, 2178, 2312, 2450, 2592, 2738, 2888, 3042, 3200, 3362, 3528, 3698, 3872, 4050, 4232, 4418, 4608, 4802, 5000, 5202, 5408, 5618, 5832, 6050, 6272, 6498, 6728, 6962, 7200, 7442, 7688, 7938, 8192, 8450, 8712, 8978, 9248, 9522, 9800, 10082, 10368, 10658, 10952, 11250, 11552, 11858, 12168, 12482, 12800, 13122, 13448, 13778, 14112, 14450, 14792, 15138, 15488, 15842, 16200, 16562, 16928, 17298, 17672, 18050, 18432, 18818, 19208, 19602, 20000, 20402, 20808, 21218, 21632, 22050, 22472, 22898, 23328, 23762, 24200, 24642, 25088, 25538, 25992, 26450, 26912, 27378, 27848, 28322, 28800, 29282, 29768, 30258, 30752, 31250, 31752, 32258, 32768, 33282, 33800, 34322, 34848, 35378, 35912, 36450, 36992, 37538, 38088, 38642, 39200, 39762, 40328, 40898, 41472, 42050, 42632, 43218, 43808, 44402, 45000, 45602, 46208, 46818, 47432, 48050, 48672, 49298, 49928, 50562, 51200, 51842, 52488, 53138, 53792, 54450, 55112, 55778, 56448, 57122, 57800, 58482, 59168, 59858, 60552, 61250, 61952, 62658, 63368, 64082, 64800, 65522, 66248, 66978, 67712, 68450, 69192, 69938, 70688, 71442, 72200, 72962, 73728, 74498, 75272, 76050, 76832, 77618, 78408, 79202, 80000, 80802, 81608, 82418, 83232, 84050, 84872, 85698, 86528, 87362, 88200, 89042, 89888, 90738, 91592, 92450, 93312, 94178, 95048, 95922, 96800, 97682, 98568, 99458]
odds=[]
primes=[2]
n=3
LIMIT=100_000
while n<LIMIT:
    for p in primes:
        if (n%p==0 and n%2!=0):
            odds.append(n)
            break;
    else:
        #print(n)
        primes.append(n)
    n=n+2
print("Primes array finished. Odds arrray finished.")

i=0 #i=index of odds array. 
run=True # once we find the number, this will shut
while i < len(odds) and run is True: # go through each composite odd number..
    for p in primes: # get each prime number
        if odds[i]-p in sq: #once found...
            i=i+1 # go onto next composite odd number using break (next line)
            break 
    else: #if current index of odds array cannot do o-p=sq. 
        print( (odds[i]), "Done.", time.time()-start, "seconds")
        run=False # Turns off the while loop, otherwise it keeps running.
        #break # you can also use a break here in same amount of processing time
        
# This problem has many different ways of solving it. It would be cool to look into more of a dynamic programming solution
# But for now I am satisifed with this processing speed of less than 5 seconds
