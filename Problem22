#Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, 
#begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value 
#by its alphabetical position in the list to obtain a name score.
#For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, 
#is the 938th name in the list. So, COLIN would obtain a score of 938 Ã— 53 = 49714.
#What is the total of all the name scores in the file?


# Solves problem in less than one second. 
import time

start=time.time()
f=open(r"C:\Users\scott\Desktop\p022_names.txt") # This problem requires downloading the file onto your computer
a = f.read()
a = a.strip().split(',') # splits name at the ,
a.sort() # sort in abc order 

letters = {
    'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8,'I':9,'J':10,'K':11,'L':12,'M':13,'N':14,'O':15,'P':16,'Q':17,'R':18,'S':19,'T':20,
    'U':21,'V':22,'W':23,'X':24,'Y':25,'Z':26
}

total=0 #keeps track of the permanent total outside the loop.

for i in range(0, 5163): # print(len(a)) #got 5163
    index=i+1 # need this to times later
    name=(a[i]) # gets "nth" name of list of names
    name = name[1:] # gets rid of the "
    name= name[:-1] # gets rid of the "
    
    for x in name: # each letter in name
        x=str(x) # must be a string like in the dictionary
        score=letters[x]*index # letters[x] gets the point value in dictionary, then times by index num
        total=total+score # adds the score of the word into the total 
print("Solution, total:", total, time.time()-start, "seconds") #Solution, total: 871198282 0.031 seconds
